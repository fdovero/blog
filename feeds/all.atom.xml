<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Journal d'un dev</title><link href="http://blog.dovero.org/" rel="alternate"></link><link href="http://blog.dovero.org/feeds/all.atom.xml" rel="self"></link><id>http://blog.dovero.org/</id><updated>2013-01-12T00:00:00+01:00</updated><entry><title>Optimiser un site web : réduire la taille des ressources statiques</title><link href="http://blog.dovero.org/optimiser-un-site-web-reduire-la-taille-des-ressources-statiques.html" rel="alternate"></link><updated>2013-01-12T00:00:00+01:00</updated><author><name>Fabien Dovero</name></author><id>tag:blog.dovero.org,2013-01-12:optimiser-un-site-web-reduire-la-taille-des-ressources-statiques.html</id><summary type="html">&lt;p&gt;La rapidité du web est le maitre mot depuis que les accès haut débit se sont démocratisés.
Aujourd'hui plus que jamais, la réactivité d'un site web est un objectif à atteindre surtout que ces mêmes sites ont tendance à enfler.
Google en fait même un critère de qualité pour son algorithme d'indexation.
J'ai été confronté a cette problématique et je vais présenté dans une série de billets différentes techniques d'optimisation, de la plus évidente à la plus tordue !
Cette série est amenée à évoluer.&lt;/p&gt;
&lt;p&gt;Dans ce premier billet de la série je vais donc parler  de ce qui est évident pour tout développeur web qui veut accélérer le rendu de son site : réduire la taille des ressources !&lt;/p&gt;
&lt;div class="section" id="reduire-le-javascript"&gt;
&lt;h2&gt;Réduire le Javascript&lt;/h2&gt;
&lt;p&gt;Il existe plusieurs réducteur de javascript. J'aime la simplicité et la puissance de &lt;a class="reference external" href="//lisperator.net/uglifyjs/"&gt;uglifyjs&lt;/a&gt;.
Pour l'installer :&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="generic prompt"&gt;$&lt;/span&gt; npm install -g uglify-js
&lt;/pre&gt;
&lt;p&gt;Ensuite pour compresser le javascript :&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="generic prompt"&gt;$&lt;/span&gt; uglifyjs -c app.js -o app.min.js
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="reduire-les-css"&gt;
&lt;h2&gt;Réduire les CSS&lt;/h2&gt;
&lt;p&gt;J'utilise &lt;a class="reference external" href="//learnboost.github.com/stylus/"&gt;stylus&lt;/a&gt; comme préprocesseur CSS. La commande stylus propose un paramètre pour compresser la sortie&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="generic prompt"&gt;$&lt;/span&gt; npm install -g stylus
&lt;span class="generic prompt"&gt;$&lt;/span&gt; stylus --compress app.styl
&lt;/pre&gt;
&lt;p&gt;Et comme j'aime les solutions tordues, on peut également passer un css pour le transformer en fichier stylus et compresser le css en sortie !&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="generic prompt"&gt;$&lt;/span&gt; stylus --css app.css &amp;amp; stylus --compress app.styl
&lt;/pre&gt;
&lt;p&gt;Si vous préférez les solutions simples il existe &lt;a class="reference external" href="//github.com/css/csso"&gt;csso&lt;/a&gt; qui rempli cette tâche à merveille :&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="generic prompt"&gt;$&lt;/span&gt; npm install -g csso
&lt;span class="generic prompt"&gt;$&lt;/span&gt; csso app.css app.min.css
&lt;/pre&gt;
&lt;p&gt;Et voilà !&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reduire-les-images"&gt;
&lt;h2&gt;Réduire les images&lt;/h2&gt;
&lt;p&gt;Les images sont les ressources le plus lourdes à transférer. Pourtant il y a un moyen simple et sans perte de réduire leur taille de 50% en moyenne. En effet les images embarquent toutes sortes de tags qui prennent une place non négligable.&lt;/p&gt;
&lt;p&gt;Pour optimiser des PNG il existe &lt;a class="reference external" href="//optipng.sourceforge.net/"&gt;optipng&lt;/a&gt; et &lt;a class="reference external" href="//www.kokkonen.net/tjko/projects.htm"&gt;jpegoptim&lt;/a&gt; pour les JPEG !&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="generic prompt"&gt;$&lt;/span&gt; optipng -o 7 ./images
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="cas-des-icon-fonts"&gt;
&lt;h2&gt;Cas des « icon fonts »&lt;/h2&gt;
&lt;p&gt;J'utilise de plus en plus ces polices d'icones (grâce à la propriété &amp;#64;font-face de CSS3). Seulement je n'utilise jamais toutes les icones proposées. J'aimerai pouvoir récupérer uniquement les icones qui m'interessent afin de réduire la taille des fichiers de la fonte et du css associé.
Pour &lt;a class="reference external" href="//fortawesome.github.com/Font-Awesome/"&gt;font awesome&lt;/a&gt; il existe &lt;a class="reference external" href="//icnfnt.com"&gt;icnfnt&lt;/a&gt; qui justement permet de se constituer son fichier aux petits ognions.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="web"></category><category term="optimisation"></category><category term="bonne pratique"></category></entry><entry><title>Installer des paquets Node.js dans virtualenv</title><link href="http://blog.dovero.org/installer-des-paquets-nodejs-dans-virtualenv.html" rel="alternate"></link><updated>2012-12-14T00:00:00+01:00</updated><author><name>Fabien Dovero</name></author><id>tag:blog.dovero.org,2012-12-14:installer-des-paquets-nodejs-dans-virtualenv.html</id><summary type="html">&lt;p&gt;Virtualenv est un outil formidable. Si vous ne l'utilisez pas encore il faut vous y mettre absoluement !
Pour résumer rapidement c'est un outil qui sert à créer des environnements de développements python isolés les uns des autres.&lt;/p&gt;
&lt;p&gt;Il m'arrive d'avoir besoin de modules d'autres languages que python notemment pour le développement web.&lt;/p&gt;
&lt;p&gt;Ce qui m'interresse aujourd'hui, c'est d'obtenir un environnement virtualisé avec virtualenv et des modules node.js (stylus jade et coffee-script)&lt;/p&gt;
&lt;div class="section" id="mise-en-place-de-l-environnement"&gt;
&lt;h2&gt;Mise en place de l'environnement&lt;/h2&gt;
&lt;p&gt;Tout d'abord, il faut mettre en place un environnement virtuel avec virtualenv (j'utilise personnellement &lt;a class="reference external" href="//www.doughellmann.com/projects/virtualenvwrapper/"&gt;virtualenvwrapper&lt;/a&gt;)&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="generic prompt"&gt;$&lt;/span&gt; mkdir devnode
&lt;span class="generic prompt"&gt;$&lt;/span&gt; mkvirtualenv devnode
&lt;/pre&gt;
&lt;p&gt;Et c'est tout !
Enfin... pour l'environnement de developpement seulement. Mais la suite est tout aussi triviale.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration-des-hooks"&gt;
&lt;h2&gt;Configuration des «&amp;nbsp;hooks&amp;nbsp;»&lt;/h2&gt;
&lt;p&gt;virtualenvwrapper propose des fichiers qui seront lus apres l'installation de l'environnement (postinstall) et surtout celui qui nous intéresse après l'activation de l'environnement (postactivate).
Il nous suffit alors de le modifier afin d'y inclure certaines directives :&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="generic prompt"&gt;$&lt;/span&gt; workon devnode
&lt;span class="generic prompt"&gt;$&lt;/span&gt; cdvirtualenv bin
&lt;/pre&gt;
&lt;p&gt;Editez ensuite le fichier postactivate et y ajouter les lignes suivantes :&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="comment"&gt;# node.js packages
&lt;/span&gt;&lt;span class="name builtin"&gt;export &lt;/span&gt;&lt;span class="name variable"&gt;npm_config_prefix&lt;/span&gt;&lt;span class="operator"&gt;=&lt;/span&gt;&lt;span class="name variable"&gt;$VIRTUAL_ENV&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;et dans le fichier predeactivate :&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="comment"&gt;# remove node.js config
&lt;/span&gt;&lt;span class="name builtin"&gt;export &lt;/span&gt;&lt;span class="name variable"&gt;npm_config_prefix&lt;/span&gt;&lt;span class="operator"&gt;=&lt;/span&gt;&lt;span class="literal string double"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Si virtualenv est configuré correctement il vous suffit de lancer les commandes d'installation des paquets habituelles :&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="generic prompt"&gt;$&lt;/span&gt; npm install -g stylus jade coffee-script
&lt;/pre&gt;
&lt;p&gt;Notez l'utilisation de l'option -g (installation globale).&lt;/p&gt;
&lt;p&gt;Et voilà. Rien de plus compliqué que ça ! Et ça fonctionne également avec les gem ruby etc...&lt;/p&gt;
&lt;p&gt;Comme ce billet le laisse entrevoir, je parlerai bientôt des préprocesseurs css (stylus) html (jade) et javascript (coffee-script).&lt;/p&gt;
&lt;/div&gt;
</summary><category term="virtualenv"></category><category term="node.js"></category></entry><entry><title>Hello World</title><link href="http://blog.dovero.org/hello-world.html" rel="alternate"></link><updated>2012-11-10T00:00:00+01:00</updated><author><name>Fabien Dovero</name></author><id>tag:blog.dovero.org,2012-11-10:hello-world.html</id><summary type="html">&lt;p&gt;Tout blog commence par son «Hello World» et celui-ci ne fait pas exception.
J'ouvre cet espace pour me servir de bloc note. Je traiterai de sujets techniques principalement.&lt;/p&gt;
&lt;p&gt;Ce blog est :&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Généré par &lt;a class="reference external" href="//blog.getpelican.com"&gt;Pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hébergé sur github::pages (les sources sont disponibles sur &lt;a class="reference external" href="//github.com/fdovero/blog"&gt;mon dépot&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Étant développeur j'utilise énormément d'outils pour accélérer mon cycle de travail et comme je l'ai dis au début, je vais exposé ici mes astuces ou les quelques découvertes qui me paraissent utiles pour la suite de mon travail.&lt;/p&gt;
&lt;p&gt;Je suis également un partisan de la culture &lt;cite&gt;Open Source&lt;/cite&gt; (j'aime le libre mais je reste pragmatique) et en tant que tel j'essai dans la mesure du possible d'utiliser des outils (logiciels ou bibliothèques) sous licences libre ou open source (les licences approuvés par l'&lt;a class="reference external" href="//opensource.org"&gt;OSI&lt;/a&gt;), il se peut donc que je parle de ce thème également.&lt;/p&gt;
&lt;p&gt;Il n'y a pas de systèmes de commentaires. C'est une volonté de ma part. Pour me contacter utilisez Twitter ou mon adress mail.&lt;/p&gt;
&lt;p&gt;Je vais donc conclure ce «Hello World».&lt;/p&gt;
&lt;p&gt;À bientôt.&lt;/p&gt;
</summary><category term="blog"></category><category term="hello"></category></entry></feed>