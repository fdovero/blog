<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>/dev/log</title><link href="http://blog.dovero.org/" rel="alternate"></link><link href="http://blog.dovero.org/feeds/blog.atom.xml" rel="self"></link><id>http://blog.dovero.org/</id><updated>2013-01-25T00:00:00+01:00</updated><entry><title>Lice : le générateur de licences Open Source(s)</title><link href="http://blog.dovero.org/lice-le-generateur-de-licences-open-sources.html" rel="alternate"></link><updated>2013-01-25T00:00:00+01:00</updated><author><name>Fabien Dovero</name></author><id>tag:blog.dovero.org,2013-01-25:lice-le-generateur-de-licences-open-sources.html</id><summary type="html">&lt;p&gt;Il y a des petits programmes dont on ne parle pas parce-qu'ils ne font rien de spectaculaire. Et pourtant ils sont tellement pratiques que l'on a du mal à s'en passer. Le petit logiciel que je vais présenter tombe dans cette catégorie.&lt;/p&gt;
&lt;div class="section" id="que-fait-il"&gt;
&lt;h2&gt;Que fait-il ?&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="//github.com/jcarbaugh/lice"&gt;Lice&lt;/a&gt; permet simplement, en ligne de commande, de générer le texte de la licence choisie en lui passant certains paramètres comme l'année, le nom de la licence ou encore le détenteur du copyright.
Un exemple est certainement plus parlant :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; lice -o &lt;span class="s2"&gt;&amp;quot;Fabien Dovero&amp;quot;&lt;/span&gt; mit &amp;gt; LICENSE
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ou encore :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; lice -y 2013 -p &lt;span class="s2"&gt;&amp;quot;My project&amp;quot;&lt;/span&gt; -o &lt;span class="s2"&gt;&amp;quot;Free soft org&amp;quot;&lt;/span&gt; bsd3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;pour avoir une liste des variables disponibles pour une licence en particulier :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; lice --vars apache
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pour-quelles-licences"&gt;
&lt;h2&gt;Pour quelles licences ?&lt;/h2&gt;
&lt;p&gt;Pour l'instant il ne supporte en natif que les licences listées sur le site de l'&lt;a class="reference external" href="//opensource.org"&gt;OSI&lt;/a&gt;. Cependant il n'est pas compliqué de rajouter une licence quelconque en s'inspirant des fichiers de template et en utilisant l'option -t :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; mkdir .licenses
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Ma licence imba {{ year }}, {{ organization }}&amp;quot;&lt;/span&gt; &amp;gt; .licences/template-amoi
&lt;span class="gp"&gt;$&lt;/span&gt; lice -y 2013 -o &lt;span class="s2"&gt;&amp;quot;Fabien Dovero&amp;quot;&lt;/span&gt; -t .licenses/template-amoi
&lt;span class="go"&gt;Ma licence imba 2013, Fabien Dovero&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pour conclure, je ne saurai que trop vous encourager à utiliser des licences open source pour votre code, en particulier ma préférée : la license &lt;a class="reference external" href="//opensource.org/licenses/MIT"&gt;MIT&lt;/a&gt; qui est parfaitement adaptée pour des petits projets.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="licence"></category><category term="pratique"></category></entry><entry><title>Vautour: thème pour pelican</title><link href="http://blog.dovero.org/vautour-theme-pour-pelican.html" rel="alternate"></link><updated>2013-01-20T00:00:00+01:00</updated><author><name>Fabien Dovero</name></author><id>tag:blog.dovero.org,2013-01-20:vautour-theme-pour-pelican.html</id><summary type="html">&lt;p&gt;Ce blog est construit grâce à &lt;a class="reference external" href="//blog.getpelican.com"&gt;Pelican&lt;/a&gt;. Le thème par défaut ( qui s'appelle notmyidea ) ne me convenait pas. J'ai donc commencé par modifier ce thème pour finalement repartir de zéro ou presque.&lt;/p&gt;
&lt;div class="section" id="point-de-depart"&gt;
&lt;h2&gt;Point de départ&lt;/h2&gt;
&lt;p&gt;Je suis parti du template « simple » sans CSS et me suis imposé certaines contraintes :&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ressources compréssées et compatibles avec des licences libres&lt;/li&gt;
&lt;li&gt;Servir en un minimum de fichiers&lt;/li&gt;
&lt;li&gt;Ne pas me servir des extensions propriétaires des navigateurs ( les -webkit- -moz- -o- )&lt;/li&gt;
&lt;li&gt;Ne pas imposer Google aux visiteurs ( aucune ressource servie par google )&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Le but étant de fournir un site le plus réactif et léger possible.&lt;/p&gt;
&lt;p&gt;J'ai utilisé &lt;a class="reference external" href="//learnboost.github.com/stylus"&gt;Stylus&lt;/a&gt; pour générer le CSS. En effet il me permet de construire mes CSS en plusieurs fichiers distincts mais de générer une sortie dans un unique fichier CSS compréssé. De plus l'utilitaire fourni une fonction de surveillance de fichier : quand le fichier surveillé est modifié il est compilé instantanément ( ce qui est un énorme avantage quand on développe pour le web ).&lt;/p&gt;
&lt;p&gt;Pour la police de caractères, il s'agit de &lt;a class="reference external" href="//openfontlibrary.org/en/font/jura"&gt;Jura&lt;/a&gt; sous licence OFL servit par &lt;a class="reference external" href="//openfontlibrary.org"&gt;openfontlibrary&lt;/a&gt; ( pour éviter google web font ), la texture de fond de la page est &lt;a class="reference external" href="//subtlepatterns.com/grid"&gt;grid&lt;/a&gt; trouvée sur &lt;a class="reference external" href="//subtlepatterns.com"&gt;subtlepatterns&lt;/a&gt; et l'echantillon d'icones est issu d' &lt;a class="reference external" href="//entypo.com"&gt;entypo&lt;/a&gt; sous licence CC-BY-SA.
Pour les icones j'ai généré un subset avec les seules icones qui m'interessent grace à l'application d'&lt;a class="reference external" href="//icomoon.io/app"&gt;icomoon&lt;/a&gt; pour réduire la taille du fichier servi.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="la-suite"&gt;
&lt;h2&gt;La suite&lt;/h2&gt;
&lt;p&gt;J'ai construis ce thème pour mes besoins personnels et il est donc très loin de couvrir tous les usages de Pelican. De plus, je ne l'ai testé que sur Firefox et Opera.&lt;/p&gt;
&lt;p&gt;Mon objectif pour la suite est de le rendre pleinements compatible sans utiliser des tricks ( commes les commentaires conditionnels ou des attributs non standardisés ) et d'englober le maximum d'usages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="choix-de-licence"&gt;
&lt;h2&gt;Choix de licence&lt;/h2&gt;
&lt;p&gt;J'ai choisi de placer le code de &lt;a class="reference external" href="//github.com/fdovero/vautour"&gt;vautour&lt;/a&gt; sous licence MIT donc amusez-vous !&lt;/p&gt;
&lt;/div&gt;
</summary><category term="pelican"></category><category term="blog"></category><category term="vautour"></category></entry><entry><title>Optimiser un site web : réduire la taille des ressources statiques</title><link href="http://blog.dovero.org/optimiser-un-site-web-reduire-la-taille-des-ressources-statiques.html" rel="alternate"></link><updated>2013-01-12T00:00:00+01:00</updated><author><name>Fabien Dovero</name></author><id>tag:blog.dovero.org,2013-01-12:optimiser-un-site-web-reduire-la-taille-des-ressources-statiques.html</id><summary type="html">&lt;p&gt;La rapidité du web est le maitre mot depuis que les accès haut débit se sont démocratisés.
Aujourd'hui plus que jamais, la réactivité d'un site web est un objectif à atteindre surtout que ces mêmes sites ont tendance à enfler.
Google en fait même un critère de qualité pour son algorithme d'indexation.
J'ai été confronté a cette problématique et je vais présenté dans une série de billets différentes techniques d'optimisation, de la plus évidente à la plus tordue !
Cette série est amenée à évoluer.&lt;/p&gt;
&lt;p&gt;Dans ce premier billet de la série je vais donc parler  de ce qui est évident pour tout développeur web qui veut accélérer le rendu de son site : réduire la taille des ressources !&lt;/p&gt;
&lt;div class="section" id="reduire-le-javascript"&gt;
&lt;h2&gt;Réduire le Javascript&lt;/h2&gt;
&lt;p&gt;Il existe plusieurs réducteur de javascript. J'aime la simplicité et la puissance de &lt;a class="reference external" href="//lisperator.net/uglifyjs/"&gt;uglifyjs&lt;/a&gt;.
Pour l'installer :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; npm install -g uglify-js
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ensuite pour compresser le javascript :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; uglifyjs -c app.js -o app.min.js
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="reduire-les-css"&gt;
&lt;h2&gt;Réduire les CSS&lt;/h2&gt;
&lt;p&gt;J'utilise &lt;a class="reference external" href="//learnboost.github.com/stylus/"&gt;stylus&lt;/a&gt; comme préprocesseur CSS. La commande stylus propose un paramètre pour compresser la sortie&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; npm install -g stylus
&lt;span class="gp"&gt;$&lt;/span&gt; stylus --compress app.styl
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Et comme j'aime les solutions tordues, on peut également passer un css pour le transformer en fichier stylus et compresser le css en sortie !&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; stylus --css app.css &amp;amp; stylus --compress app.styl
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Si vous préférez les solutions simples il existe &lt;a class="reference external" href="//github.com/css/csso"&gt;csso&lt;/a&gt; qui rempli cette tâche à merveille :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; npm install -g csso
&lt;span class="gp"&gt;$&lt;/span&gt; csso app.css app.min.css
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Et voilà !&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reduire-les-images"&gt;
&lt;h2&gt;Réduire les images&lt;/h2&gt;
&lt;p&gt;Les images sont les ressources le plus lourdes à transférer. Pourtant il y a un moyen simple et sans perte de réduire leur taille de 50% en moyenne. En effet les images embarquent toutes sortes de tags qui prennent une place non négligable.&lt;/p&gt;
&lt;p&gt;Pour optimiser des PNG il existe &lt;a class="reference external" href="//optipng.sourceforge.net/"&gt;optipng&lt;/a&gt; et &lt;a class="reference external" href="//www.kokkonen.net/tjko/projects.htm"&gt;jpegoptim&lt;/a&gt; pour les JPEG !&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; optipng -o 7 ./images
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="cas-des-icon-fonts"&gt;
&lt;h2&gt;Cas des « icon fonts »&lt;/h2&gt;
&lt;p&gt;J'utilise de plus en plus ces polices d'icones (grâce à la propriété &amp;#64;font-face de CSS3). Seulement je n'utilise jamais toutes les icones proposées. J'aimerai pouvoir récupérer uniquement les icones qui m'interessent afin de réduire la taille des fichiers de la fonte et du css associé.
Pour &lt;a class="reference external" href="//fortawesome.github.com/Font-Awesome/"&gt;font awesome&lt;/a&gt; il existe &lt;a class="reference external" href="//icnfnt.com"&gt;icnfnt&lt;/a&gt; qui justement permet de se constituer son fichier aux petits ognions.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="web"></category><category term="optimisation"></category><category term="bonne pratique"></category></entry><entry><title>Installer des paquets Node.js dans virtualenv</title><link href="http://blog.dovero.org/installer-des-paquets-nodejs-dans-virtualenv.html" rel="alternate"></link><updated>2012-12-14T00:00:00+01:00</updated><author><name>Fabien Dovero</name></author><id>tag:blog.dovero.org,2012-12-14:installer-des-paquets-nodejs-dans-virtualenv.html</id><summary type="html">&lt;p&gt;Virtualenv est un outil formidable. Si vous ne l'utilisez pas encore il faut vous y mettre absoluement !
Pour résumer rapidement c'est un outil qui sert à créer des environnements de développements python isolés les uns des autres.&lt;/p&gt;
&lt;p&gt;Il m'arrive d'avoir besoin de modules d'autres languages que python notemment pour le développement web.&lt;/p&gt;
&lt;p&gt;Ce qui m'interresse aujourd'hui, c'est d'obtenir un environnement virtualisé avec virtualenv et des modules node.js (stylus jade et coffee-script)&lt;/p&gt;
&lt;div class="section" id="mise-en-place-de-l-environnement"&gt;
&lt;h2&gt;Mise en place de l'environnement&lt;/h2&gt;
&lt;p&gt;Tout d'abord, il faut mettre en place un environnement virtuel avec virtualenv (j'utilise personnellement &lt;a class="reference external" href="//www.doughellmann.com/projects/virtualenvwrapper/"&gt;virtualenvwrapper&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; mkdir devnode
&lt;span class="gp"&gt;$&lt;/span&gt; mkvirtualenv devnode
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Et c'est tout !
Enfin... pour l'environnement de developpement seulement. Mais la suite est tout aussi triviale.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration-des-hooks"&gt;
&lt;h2&gt;Configuration des «&amp;nbsp;hooks&amp;nbsp;»&lt;/h2&gt;
&lt;p&gt;virtualenvwrapper propose des fichiers qui seront lus apres l'installation de l'environnement (postinstall) et surtout celui qui nous intéresse après l'activation de l'environnement (postactivate).
Il nous suffit alors de le modifier afin d'y inclure certaines directives :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; workon devnode
&lt;span class="gp"&gt;$&lt;/span&gt; cdvirtualenv bin
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Editez ensuite le fichier postactivate et y ajouter les lignes suivantes :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# node.js packages&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;npm_config_prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$VIRTUAL_ENV&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;et dans le fichier predeactivate :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# remove node.js config&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;npm_config_prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Si virtualenv est configuré correctement il vous suffit de lancer les commandes d'installation des paquets habituelles :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; npm install -g stylus jade coffee-script
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notez l'utilisation de l'option -g (installation globale).&lt;/p&gt;
&lt;p&gt;Et voilà. Rien de plus compliqué que ça ! Et ça fonctionne également avec les gem ruby etc...&lt;/p&gt;
&lt;p&gt;Comme ce billet le laisse entrevoir, je parlerai bientôt des préprocesseurs css (stylus) html (jade) et javascript (coffee-script).&lt;/p&gt;
&lt;/div&gt;
</summary><category term="virtualenv"></category><category term="node.js"></category></entry><entry><title>Hello World</title><link href="http://blog.dovero.org/hello-world.html" rel="alternate"></link><updated>2012-11-10T00:00:00+01:00</updated><author><name>Fabien Dovero</name></author><id>tag:blog.dovero.org,2012-11-10:hello-world.html</id><summary type="html">&lt;p&gt;Tout blog commence par son «Hello World» et celui-ci ne fait pas exception.
J'ouvre cet espace pour me servir de bloc note. Je traiterai de sujets techniques principalement.&lt;/p&gt;
&lt;p&gt;Ce blog est :&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Généré par &lt;a class="reference external" href="//blog.getpelican.com"&gt;Pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hébergé sur github:pages (les sources sont disponibles sur &lt;a class="reference external" href="//github.com/fdovero/blog"&gt;mon dépot&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Étant développeur j'utilise énormément d'outils pour accélérer mon cycle de travail et comme je l'ai dis au début, je vais exposé ici mes astuces ou les quelques découvertes qui me paraissent utiles pour la suite de mon travail.&lt;/p&gt;
&lt;p&gt;Je suis également un partisan de la culture &lt;cite&gt;Open Source&lt;/cite&gt; (j'aime le libre mais je reste pragmatique) et en tant que tel j'essai dans la mesure du possible d'utiliser des outils (logiciels ou bibliothèques) sous licences libre ou open source (les licences approuvés par l'&lt;a class="reference external" href="//opensource.org"&gt;OSI&lt;/a&gt;), il se peut donc que je parle de ce thème également.&lt;/p&gt;
&lt;p&gt;Il n'y a pas de systèmes de commentaires. C'est une volonté de ma part. Pour me contacter utilisez Twitter ou mon adress mail.&lt;/p&gt;
&lt;p&gt;Je vais donc conclure ce «Hello World».&lt;/p&gt;
&lt;p&gt;À bientôt.&lt;/p&gt;
</summary><category term="blog"></category><category term="hello"></category></entry></feed>